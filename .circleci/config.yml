version: 2.1

commands:
 deploy_build:
  steps:
    - run: npm install
    - run:
        name: Installing deployment dependencies
        command: |
          sudo apt-get -y -qq update
          sudo apt-get install python-pip python-dev build-essential
          sudo pip install --upgrade setuptools
          sudo pip install awsebcli --upgrade
    - run:
        name: Deploying to Elastic Beanstalk
        command: |
          export EB_ENV=dev-gitwize
          export PATTERN="v[0-9]+(\.[0-9]+).*"
          if [[ ${CIRCLE_TAG} =~  ${PATTERN} ]]; then
            export EB_ENV=qa-gitwize 
            echo "deploy to QA"
          fi 
          eb use ${EB_ENV} 
          eb deploy

jobs:
  build:
    docker:
      - image: circleci/golang:1.14
        environment:
          - GO111MODULE=on
          - GW_DATABASE_SECRET_LOCAL=P@ssword123
      - image: mysql:5.7.22
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD=true
          - MYSQL_USER=gitwize_user
          - MYSQL_DATABASE=gitwize
          - MYSQL_PASSWORD=P@ssword123
    working_directory: /go/src/gitwize-be
    steps:
      - checkout
      - run: echo "start build " && go version
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Load init SQL # docker/init.sql
          command: |
           sudo bash -c "apt-get update && apt-get install -y default-mysql-client"
           mysql -h 127.0.0.1 -P 3306 --protocol=tcp -u ${MYSQL_USER} -p${MYSQL_PASSWORD} <./docker/init.sql
      - run:
          name: Unit test
          command: go test -count=1 ./...
      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}'
  deploy:
    docker:
      - image: circleci/node:latest # the primary container, where your job's commands are run
    steps:
      - checkout # check out the code in the project directory
      - deploy_build
      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}'

  deploy-qa:
    docker:
      - image: circleci/node:latest # the primary container, where your job's commands are run
    steps:
      - checkout # check out the code in the project directory
      - deploy_build
      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}'
orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.0.0
workflows:
  ci-workflow:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - /deploy-.*/
      - deploy-qa:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+).*/                
